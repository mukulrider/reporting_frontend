/**
 * Gauge Chart
 */

gauge = function(container, configuration) {
	let that = this;
	that.sectorColorFn = function(tick){
		let cfg = this;
		let min=cfg.lowSector.split(',')[0];
		let max=cfg.lowSector.split(',')[1];
		if(tick>=min&&tick<=max){
			return '#e92213';//red
		}
		min=cfg.midSector.split(',')[0];
		max=cfg.midSector.split(',')[1];
		if(tick>=min&&tick<=max){
			return '#FFFE35';//yellow
		}
		min=cfg.highSector.split(',')[0];
		max=cfg.highSector.split(',')[1];
		if(tick>=min&&tick<=max){
			return '#3EE91A';//green
		}
		return 'none';
	}
	that.setMinMaxValue=function(cfg){
		let min =parseFloat(cfg.minValue);
		let max =parseFloat(cfg.maxValue);
		let sectors=[parseFloat(cfg.lowSector.split(',')[0]),
		             parseFloat(cfg.lowSector.split(',')[1]),
		            		 parseFloat(cfg.midSector.split(',')[0]),
		            				 parseFloat(cfg.midSector.split(',')[1]),
		            						 parseFloat(cfg.highSector.split(',')[0]),
		            								 parseFloat(cfg.highSector.split(',')[1])];
		for(let i=0;i<sectors.length;i++){
			if(sectors[i]<=min){
				min=sectors[i];
			}
			if(sectors[i]>=max){
				max=sectors[i];
			}
		}
		cfg.minValue=min;
		cfg.maxValue=max;

		cfg.majorTicks=(max-min)/10;

		return cfg;
	}
	that.getSize=function (height,width){
		return (height<width)?height+((width-height)/2):width+((height-width)/2);
	}
	config = {
    size						: 100,
    clipWidth					: 450,
    clipHeight					: 350,
    ringWidth					: 1,
		size						: that.getSize(configuration.clipHeight, configuration.clipWidth),
//		clipWidth					: configuration.clipWidth,
//		clipHeight					: configuration.clipHeight,
//		ringWidth					: configuration.ringWidth,
		ringInset					: 20,
		pointerWidth				: 4,
		pointerTailLength			: 8,
		pointerHeadLengthPercent	: 1.01,

		/*minValue					: 0,//grab smallest value from sectors
		maxValue					: 100,//grab largest value from sectors
		lowSector					:'0,30',//red
		midSector					:'30,60',//yellow
		highSector					:'60,100',//green
*/

		margin						: configuration.margin,
		minAngle					: -90,
		maxAngle					: 90,

		transitionMs				: configuration.transitionMs||4000,

		majorTicks					: 10,//(max-min) divide by 10

		minValue					: 0||configuration.lowSector.split(',')[0],//grab smallest value from sectors
		maxValue					: 100||configuration.highSector.split(',')[1],//grab largest value from sectors
		lowSector					:configuration.lowSector,//red
		midSector					:configuration.midSector,//yellow
		highSector					:configuration.highSector,//green
		value						:configuration.value,

		labelFormat					: d3.format(',g'),
		labels:function(d){
			if($.inArray(d, that.tickValues)>-1){//only display major ticks instead of all datas
				return config.labelFormat(d);
			}
		},
		labelInset					: 10,

		sectorColorFn				:that.sectorColorFn,
	};

	config=that.setMinMaxValue(config);
	for(prop in config){
		that[prop]=config[prop];
	}
	if(configuration.goal){
		let goal = parseFloat(configuration.goal);
		let upperLowSector = goal-goal*10/100;
		let maxValue=100;//default 100
		if(upperLowSector>0&&upperLowSector<10){
			maxValue=10;
		}else if(upperLowSector>100&&upperLowSector<1000){
			maxValue=1000;
		}

		that.lowSector="0,"+upperLowSector;
		that.midSector=upperLowSector+","+goal;
		that.highSector=goal+","+maxValue;
	}
	let range = undefined;
	let r = undefined;
	let pointerHeadLength = undefined;
	let value = 0;

	let svg = undefined;
	let arc = undefined;
	let scale = undefined;
	let ticks = undefined;
	let tickValues = undefined;
	let tickData = undefined;
	let pointer = undefined;

	let donut = d3.layout.pie();

	function deg2rad(deg) {
		return deg * Math.PI / 180;
	}

	function newAngle(d) {
		let ratio = scale(d);
		let newAngle = config.minAngle + (ratio * range);
		return newAngle;
	}

	function configure() {

		that.size=that.getSize(that.clipHeight, that.clipWidth);
		that.ringWidth=200*0.2;
		range = that.maxAngle - that.minAngle;
		r = 300 / 2;
		that.pointerHeadLength = Math.round(r * that.pointerHeadLengthPercent);

		// a linear scale that maps domain values to a percent from 0..1
		scale = d3.scale.linear()
			.range([0,1])
			.domain([that.minValue, that.maxValue]);

		that.ticks = scale.ticks(that.maxValue);
		that.tickValues=scale.ticks(that.majorTicks);
		that.tickData = d3.range(that.maxValue).map(function() {return 1/that.maxValue;});

		arc = d3.svg.arc()
			.innerRadius(r - that.ringWidth - that.ringInset)
			.outerRadius(r - that.ringInset-10)
			.startAngle(function(d, i) {
				let ratio = d * i;
				return deg2rad(that.minAngle + (ratio * range));
			})
			.endAngle(function(d, i) {
				let ratio = d * (i+1);
				return deg2rad(that.minAngle + (ratio * range));
			});
	}

	function centerTranslation() {
		return 'translate('+r +','+ r +')';
	}

	function isRendered() {
		return (svg !== undefined);
	}

	function render() {
		if(d3.select(container).selectAll('.gauge')){
			d3.select(container).selectAll('.gauge').remove()
		}
		svg = d3.select(container)
		.attr('width', that.clipWidth+that.margin.left)
		.attr('height', that.clipHeight)
		.append('svg:svg')
		.attr('class', 'gauge')
		.attr('width', that.clipWidth)
		.attr('height', that.clipHeight)
		.attr('x',that.margin.left)
    .attr('y',that.margin.top);

		let centerTx = centerTranslation();

		let arcs = svg.append('g')
				.attr('class', 'arc')
				.attr('transform', centerTx);

		arcs.selectAll('path')
				.data(that.tickData)//populate the section of the dial
			.enter().append('path')
				.attr('fill', function(d, i) {
					/*return config.arcColorFn(d * i);*/
					return that.sectorColorFn(that.ticks[i+1]);//fill in all the colors in the dial section
				})
				.attr('d', arc);

		//appending gauge ticks
		let lg = svg.append('g')
				.attr('class', 'label')
				.attr('transform', centerTx);
		lg.selectAll('text')
				.data(that.ticks)
			.enter().append('text')
				.attr('transform', function(d) {//this portion rotate and place the ticks at the correct position surrounding the gauge
					if($.inArray(d, that.tickValues)>-1){//rotate only the displayed majorTicks
						let ratio = scale(d);
						let newAngle = that.minAngle + (ratio * range)-4;
						return 'rotate(' +newAngle+') translate(0,' +(that.labelInset - r+10) +')';
					}
				})
				.text(that.labels);

		//create the gauge needle that point to the value
		let lineData = [ [that.pointerWidth / 2, 0],
						[0, -that.pointerHeadLength],
						[-(that.pointerWidth / 2), 0],
						[0, that.pointerTailLength],
						[that.pointerWidth / 2, 0] ];
		let pointerLine = d3.svg.line().interpolate('monotone');
		let pg = svg.append('g').data([lineData])
				.attr('class', 'pointer')
				.attr('transform', centerTx);

		pointer = pg.append('path')
			.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )
			.attr('transform', 'rotate(' +that.minAngle +')');

		update(that.value === undefined ? 0 : that.value);
	}
	function update() {
		/*if ( newConfiguration  !== undefined) {
			configure(newConfiguration);
		}*/
		let ratio = scale(that.value);
		let newAngle = that.minAngle + (ratio * range);
		pointer.transition()
			.duration(that.transitionMs)
			.ease('elastic')
			.attr('transform', 'rotate(' +newAngle +')');
	}

	function height(height){
		that.clipHeight=height;
		that.configure();
		that.render();
	}

	function width(width){
		that.clipWidth=width;
		that.configure();
		that.render();
	}

	configure();

	that.configure = configure;
	that.isRendered = isRendered;
	that.render = render;
	that.update = update;
	that.height = height;
	that.width = width;
	return that;
};

let gaugeOptions = {
			 margin: { top : 80, left : 70},
			clipWidth: 300,
			clipHeight:  300,
			lowSector:'0,42.0',//red
			midSector:'42.0,63',//yellow
			highSector:'63,100',//green
			value:82,
	};

  let gaugeChart=gauge('#gauge',gaugeOptions);
  gaugeChart.render();
